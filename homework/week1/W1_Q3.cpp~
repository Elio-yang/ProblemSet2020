#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <algorithm>

struct sparse_matrix{
        int row;
        int col;
        int val;
};


int main()
{
        int m;
        int n;
        scanf("%d %d",&m,&n);
        struct sparse_matrix M_a[m+10];
        int max_row_a=0;
        int max_col_a=0;
        struct sparse_matrix M_b[n+10];
        int max_row_b=0;
        int max_col_b=0;
        for(int i=1;i<=m;i++){
                scanf("%d %d %d",&M_a[i].row,&M_a[i].col,&M_a[i].val);
                (M_a[i].row>max_row_a)?(max_row_a=M_a[i].row):(max_row_a=max_row_a);
                (M_a[i].col>max_col_a)?(max_col_a=M_a[i].col):(max_col_a=max_col_a);
        }
        for(int i=1;i<=n;i++){
                scanf("%d %d %d",&M_b[i].row,&M_b[i].col,&M_b[i].val);
                (M_b[i].row>max_row_b)?(max_row_b=M_b[i].row):(max_row_b=max_row_b);
                (M_b[i].col>max_col_b)?(max_col_b=M_b[i].col):(max_col_b=max_col_b);
        }


        int max_col=std::max(max_col_a,max_col_b);
        int max_row=std::max(max_row_a,max_row_b);
        
        int R=max_col+20;
        int C=max_col+20;

        int m_a[R][C];
        memset(m_a,0,sizeof(int)*R*C);
        int m_b[R][C];
        memset(m_b,0,sizeof(int)*R*C);


        for(int i=1;i<=m;i++){
                int row=M_a[i].row;
                int col=M_a[i].col;
                int val=M_a[i].val;
                m_a[row][col]=val;
        }
        for(int i=1;i<=n;i++){
                int row=M_b[i].row;
                int col=M_b[i].col;
                int val=M_b[i].val;
                m_b[row][col]=val;
        }
        int ans[R][C];
        memset(ans,0,sizeof(int)*R*C);

        int cnt=0;
        for(int i=1;i<R;i++){
                for(int j=1;j<C;j++){
                        ans[i][j]=m_a[i][j]-m_b[i][j];
                        if(ans[i][j]!=0){cnt++;}
                }
        }

	struct sparse_matrix p_m[cnt];
	int t=0;
	for(int i=1;i<R;i++){
		for(int j=1;j<C;j++){
			if(*(*(ans+i)+j)!=0){
				p_m[t].row=i;
				p_m[t].col=j;
				p_m[t].val=*(*(ans+i)+j);
				t++;
			}
		}
	}

        for(int i=0;i<cnt;i++){
                printf("%d %d %d\n",p_m[i].row,p_m[i].col,p_m[i].val);
        }
        system("pause");
        return 0;
}
